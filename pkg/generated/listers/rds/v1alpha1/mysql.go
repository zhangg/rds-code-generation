/*
 Copyright 2019 The CloudDB Authors

  Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rds-operator/pkg/apis/rds/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MysqlLister helps list Mysqls.
type MysqlLister interface {
	// List lists all Mysqls in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Mysql, err error)
	// Mysqls returns an object that can list and get Mysqls.
	Mysqls(namespace string) MysqlNamespaceLister
	MysqlListerExpansion
}

// mysqlLister implements the MysqlLister interface.
type mysqlLister struct {
	indexer cache.Indexer
}

// NewMysqlLister returns a new MysqlLister.
func NewMysqlLister(indexer cache.Indexer) MysqlLister {
	return &mysqlLister{indexer: indexer}
}

// List lists all Mysqls in the indexer.
func (s *mysqlLister) List(selector labels.Selector) (ret []*v1alpha1.Mysql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Mysql))
	})
	return ret, err
}

// Mysqls returns an object that can list and get Mysqls.
func (s *mysqlLister) Mysqls(namespace string) MysqlNamespaceLister {
	return mysqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MysqlNamespaceLister helps list and get Mysqls.
type MysqlNamespaceLister interface {
	// List lists all Mysqls in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Mysql, err error)
	// Get retrieves the Mysql from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Mysql, error)
	MysqlNamespaceListerExpansion
}

// mysqlNamespaceLister implements the MysqlNamespaceLister
// interface.
type mysqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Mysqls in the indexer for a given namespace.
func (s mysqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Mysql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Mysql))
	})
	return ret, err
}

// Get retrieves the Mysql from the indexer for a given namespace and name.
func (s mysqlNamespaceLister) Get(name string) (*v1alpha1.Mysql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mysql"), name)
	}
	return obj.(*v1alpha1.Mysql), nil
}
